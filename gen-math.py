#!/usr/bin/env python3
# © 2014 George King.
# Permission to use this file is granted in license-qk.txt.

from collections import namedtuple
from itertools import zip_longest

Pair = namedtuple('Pair', ['a', 'b'])

dims = [2, 3, 4]
all_comps = ['x', 'y', 'z', 'w']
types = ['F32', 'F64']
ops = ['+', '-', '*', '/']

def fmt(f, *items):
  res = []
  chunks = f.split('$')
  for c, i in zip_longest(chunks, items, fillvalue=''):
    res.append(c)
    res.append(str(i))
  return ''.join(res)

def L(f, *items):
  print(fmt(f, *items))

def jc(a): return ', '.join(a)
def js(a): return ' '.join(a)

def gen(d, t):
  comps = all_comps[:d]
  comps_a = ['a.' + c for c in comps]
  comps_b = ['b.' + c for c in comps]
  comps_ab = [Pair(a, b) for a, b in zip(comps_a, comps_b)]
  vt = fmt('V$$', d, t)
  vars = jc(comps)
  init_pars = jc(fmt('_ $: $', comp, t) for comp in comps)
  init_expr = ''
  L('struct $ {', vt)
  L('  var $: $', vars, t)
  L('  init($) { $', init_pars, init_expr)
  for c in comps:
    L('    self.$ = $', c, c)
  L('  }')
  L('}\n')

  for op in ops:
    cons_comps_v = jc(fmt('$ $ $', a, op, b) for a, b in comps_ab)
    L('func $(a: $, b: $) -> $ { return $($) }', op, vt, vt, vt, vt, cons_comps_v)
  for op in ops:
    cons_comps_s = jc(fmt('$ $ s', a, op) for a in comps_a)
    L('func $(a: $, s: $) -> $ { return $($) }', op, vt, t, vt, vt, cons_comps_s)
  L('\n')

L('''\
// © 2014 George King.
// Permission to use this file is granted in license-qk.txt.
// This file is generated by gen-math.py.
''')

for d in dims:
  for t in types:
    gen(d, t)
