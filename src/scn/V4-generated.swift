// Â© 2015 George King.
// Permission to use this file is granted in license-qk.txt.
// This file is generated by gen-vec.py.

  
import SceneKit

extension V4 {
  typealias ScalarType = Flt
  typealias FloatType = Flt
  typealias VSType = V4S
  typealias VDType = V4D
  init(_ x: Flt = 0, _ y: Flt = 0, _ z: Flt = 0, _ w: Flt = 0) {
    self.x = x
    self.y = y
    self.z = z
    self.w = w
  }
  init(_ v: V4) { self = v }
  init(_ v: V4S) {
    self.x = Flt(v.x)
    self.y = Flt(v.y)
    self.z = Flt(v.z)
    self.w = Flt(v.w)
  }
  init(_ v: V4D) {
    self.x = Flt(v.x)
    self.y = Flt(v.y)
    self.z = Flt(v.z)
    self.w = Flt(v.w)
  }
  init(_ v: V4I) {
    self.x = Flt(v.x)
    self.y = Flt(v.y)
    self.z = Flt(v.z)
    self.w = Flt(v.w)
  }
  init(_ v: V3, _ s: Flt) {
    self.x = v.x
    self.y = v.y
    self.z = v.z
    self.w = s
  }
  static let zero = V4(0, 0, 0, 0)
  static let unitX = V4(1, 0, 0, 0)
  static let unitY = V4(0, 1, 0, 0)
  static let unitZ = V4(0, 0, 1, 0)
  static let unitW = V4(0, 0, 0, 1)
  public var description: String { return "V4(\(x), \(y), \(z), \(w))" }
  var vs: V4S { return V4S(F32(x), F32(y), F32(z), F32(w)) }
  var vd: V4D { return V4D(F64(x), F64(y), F64(z), F64(w)) }
  var sqrLen: Flt { return (Flt(x).sqr + Flt(y).sqr + Flt(z).sqr + Flt(w).sqr) }
  var len: Flt { return sqrLen.sqrt }
  var aspect: Flt { return Flt(x) / Flt(y) }
  var r: Flt { return x }
  var g: Flt { return y }
  var b: Flt { return z }
  var a: Flt { return w }

  var norm: V4 { return V4(self) / self.len }
  var clampToUnit: V4 { return V4(clamp(x, 0, 1), clamp(y, 0, 1), clamp(z, 0, 1), clamp(w, 0, 1)) }
  func dist(b: V4) -> Flt { return (b - self).len }
  func dot(b: V4) -> Flt { return (x * b.x) + (y * b.y) + (z * b.z) + (w * b.w) }
  func angle(b: V4) -> Flt { return acos(self.dot(b) / (self.len * b.len)) }

  func cross(b: V4) -> V4 { return V4(
  y * b.z - z * b.y,
  z * b.x - x * b.z,
  x * b.y - y * b.x,
  0
)}

}

func +(a: V4, b: V4) -> V4 { return V4(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w) }
func -(a: V4, b: V4) -> V4 { return V4(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w) }
func *(a: V4, b: V4) -> V4 { return V4(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w) }
func /(a: V4, b: V4) -> V4 { return V4(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w) }
func +(a: V4, s: Flt) -> V4 { return V4(a.x + s, a.y + s, a.z + s, a.w + s) }
func -(a: V4, s: Flt) -> V4 { return V4(a.x - s, a.y - s, a.z - s, a.w - s) }
func *(a: V4, s: Flt) -> V4 { return V4(a.x * s, a.y * s, a.z * s, a.w * s) }
func /(a: V4, s: Flt) -> V4 { return V4(a.x / s, a.y / s, a.z / s, a.w / s) }

