// Â© 2014 George King.
// Permission to use this file is granted in license-qk.txt.
// This file is generated by gen-math.py.

struct V2F32: Printable {
  var x, y: F32
  init(_ x: F32, _ y: F32) {
    self.x = x
    self.y = y
  }
  var description: String { return "V2F32(\(x), \(y))" }
  var len: F32 { return sqrrt(sqr(x) + sqr(y)) }
  var norm: V2F32 { return self / self.len }
  var clampToUnit: V2F32 { return V2F32(clamp(x, 0, 1), clamp(y, 0, 1)) }
}

func +(a: V2F32, b: V2F32) -> V2F32 { return V2F32(a.x + b.x, a.y + b.y) }
func -(a: V2F32, b: V2F32) -> V2F32 { return V2F32(a.x - b.x, a.y - b.y) }
func *(a: V2F32, b: V2F32) -> V2F32 { return V2F32(a.x * b.x, a.y * b.y) }
func /(a: V2F32, b: V2F32) -> V2F32 { return V2F32(a.x / b.x, a.y / b.y) }
func +(a: V2F32, s: F32) -> V2F32 { return V2F32(a.x + s, a.y + s) }
func -(a: V2F32, s: F32) -> V2F32 { return V2F32(a.x - s, a.y - s) }
func *(a: V2F32, s: F32) -> V2F32 { return V2F32(a.x * s, a.y * s) }
func /(a: V2F32, s: F32) -> V2F32 { return V2F32(a.x / s, a.y / s) }


struct V2F64: Printable {
  var x, y: F64
  init(_ x: F64, _ y: F64) {
    self.x = x
    self.y = y
  }
  var description: String { return "V2F64(\(x), \(y))" }
  var len: F64 { return sqrrt(sqr(x) + sqr(y)) }
  var norm: V2F64 { return self / self.len }
  var clampToUnit: V2F64 { return V2F64(clamp(x, 0, 1), clamp(y, 0, 1)) }
}

func +(a: V2F64, b: V2F64) -> V2F64 { return V2F64(a.x + b.x, a.y + b.y) }
func -(a: V2F64, b: V2F64) -> V2F64 { return V2F64(a.x - b.x, a.y - b.y) }
func *(a: V2F64, b: V2F64) -> V2F64 { return V2F64(a.x * b.x, a.y * b.y) }
func /(a: V2F64, b: V2F64) -> V2F64 { return V2F64(a.x / b.x, a.y / b.y) }
func +(a: V2F64, s: F64) -> V2F64 { return V2F64(a.x + s, a.y + s) }
func -(a: V2F64, s: F64) -> V2F64 { return V2F64(a.x - s, a.y - s) }
func *(a: V2F64, s: F64) -> V2F64 { return V2F64(a.x * s, a.y * s) }
func /(a: V2F64, s: F64) -> V2F64 { return V2F64(a.x / s, a.y / s) }


struct V3F32: Printable {
  var x, y, z: F32
  init(_ x: F32, _ y: F32, _ z: F32) {
    self.x = x
    self.y = y
    self.z = z
  }
  init(_ v: V2F32, _ s: F32) {
    self.x = v.x
    self.y = v.y
    self.z = s
  }
  var description: String { return "V3F32(\(x), \(y), \(z))" }
  var len: F32 { return sqrrt(sqr(x) + sqr(y) + sqr(z)) }
  var norm: V3F32 { return self / self.len }
  var clampToUnit: V3F32 { return V3F32(clamp(x, 0, 1), clamp(y, 0, 1), clamp(z, 0, 1)) }
}

func +(a: V3F32, b: V3F32) -> V3F32 { return V3F32(a.x + b.x, a.y + b.y, a.z + b.z) }
func -(a: V3F32, b: V3F32) -> V3F32 { return V3F32(a.x - b.x, a.y - b.y, a.z - b.z) }
func *(a: V3F32, b: V3F32) -> V3F32 { return V3F32(a.x * b.x, a.y * b.y, a.z * b.z) }
func /(a: V3F32, b: V3F32) -> V3F32 { return V3F32(a.x / b.x, a.y / b.y, a.z / b.z) }
func +(a: V3F32, s: F32) -> V3F32 { return V3F32(a.x + s, a.y + s, a.z + s) }
func -(a: V3F32, s: F32) -> V3F32 { return V3F32(a.x - s, a.y - s, a.z - s) }
func *(a: V3F32, s: F32) -> V3F32 { return V3F32(a.x * s, a.y * s, a.z * s) }
func /(a: V3F32, s: F32) -> V3F32 { return V3F32(a.x / s, a.y / s, a.z / s) }


struct V3F64: Printable {
  var x, y, z: F64
  init(_ x: F64, _ y: F64, _ z: F64) {
    self.x = x
    self.y = y
    self.z = z
  }
  init(_ v: V2F64, _ s: F64) {
    self.x = v.x
    self.y = v.y
    self.z = s
  }
  var description: String { return "V3F64(\(x), \(y), \(z))" }
  var len: F64 { return sqrrt(sqr(x) + sqr(y) + sqr(z)) }
  var norm: V3F64 { return self / self.len }
  var clampToUnit: V3F64 { return V3F64(clamp(x, 0, 1), clamp(y, 0, 1), clamp(z, 0, 1)) }
}

func +(a: V3F64, b: V3F64) -> V3F64 { return V3F64(a.x + b.x, a.y + b.y, a.z + b.z) }
func -(a: V3F64, b: V3F64) -> V3F64 { return V3F64(a.x - b.x, a.y - b.y, a.z - b.z) }
func *(a: V3F64, b: V3F64) -> V3F64 { return V3F64(a.x * b.x, a.y * b.y, a.z * b.z) }
func /(a: V3F64, b: V3F64) -> V3F64 { return V3F64(a.x / b.x, a.y / b.y, a.z / b.z) }
func +(a: V3F64, s: F64) -> V3F64 { return V3F64(a.x + s, a.y + s, a.z + s) }
func -(a: V3F64, s: F64) -> V3F64 { return V3F64(a.x - s, a.y - s, a.z - s) }
func *(a: V3F64, s: F64) -> V3F64 { return V3F64(a.x * s, a.y * s, a.z * s) }
func /(a: V3F64, s: F64) -> V3F64 { return V3F64(a.x / s, a.y / s, a.z / s) }


struct V4F32: Printable {
  var x, y, z, w: F32
  init(_ x: F32, _ y: F32, _ z: F32, _ w: F32) {
    self.x = x
    self.y = y
    self.z = z
    self.w = w
  }
  init(_ v: V3F32, _ s: F32) {
    self.x = v.x
    self.y = v.y
    self.z = v.z
    self.w = s
  }
  var description: String { return "V4F32(\(x), \(y), \(z), \(w))" }
  var len: F32 { return sqrrt(sqr(x) + sqr(y) + sqr(z) + sqr(w)) }
  var norm: V4F32 { return self / self.len }
  var clampToUnit: V4F32 { return V4F32(clamp(x, 0, 1), clamp(y, 0, 1), clamp(z, 0, 1), clamp(w, 0, 1)) }
}

func +(a: V4F32, b: V4F32) -> V4F32 { return V4F32(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w) }
func -(a: V4F32, b: V4F32) -> V4F32 { return V4F32(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w) }
func *(a: V4F32, b: V4F32) -> V4F32 { return V4F32(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w) }
func /(a: V4F32, b: V4F32) -> V4F32 { return V4F32(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w) }
func +(a: V4F32, s: F32) -> V4F32 { return V4F32(a.x + s, a.y + s, a.z + s, a.w + s) }
func -(a: V4F32, s: F32) -> V4F32 { return V4F32(a.x - s, a.y - s, a.z - s, a.w - s) }
func *(a: V4F32, s: F32) -> V4F32 { return V4F32(a.x * s, a.y * s, a.z * s, a.w * s) }
func /(a: V4F32, s: F32) -> V4F32 { return V4F32(a.x / s, a.y / s, a.z / s, a.w / s) }


struct V4F64: Printable {
  var x, y, z, w: F64
  init(_ x: F64, _ y: F64, _ z: F64, _ w: F64) {
    self.x = x
    self.y = y
    self.z = z
    self.w = w
  }
  init(_ v: V3F64, _ s: F64) {
    self.x = v.x
    self.y = v.y
    self.z = v.z
    self.w = s
  }
  var description: String { return "V4F64(\(x), \(y), \(z), \(w))" }
  var len: F64 { return sqrrt(sqr(x) + sqr(y) + sqr(z) + sqr(w)) }
  var norm: V4F64 { return self / self.len }
  var clampToUnit: V4F64 { return V4F64(clamp(x, 0, 1), clamp(y, 0, 1), clamp(z, 0, 1), clamp(w, 0, 1)) }
}

func +(a: V4F64, b: V4F64) -> V4F64 { return V4F64(a.x + b.x, a.y + b.y, a.z + b.z, a.w + b.w) }
func -(a: V4F64, b: V4F64) -> V4F64 { return V4F64(a.x - b.x, a.y - b.y, a.z - b.z, a.w - b.w) }
func *(a: V4F64, b: V4F64) -> V4F64 { return V4F64(a.x * b.x, a.y * b.y, a.z * b.z, a.w * b.w) }
func /(a: V4F64, b: V4F64) -> V4F64 { return V4F64(a.x / b.x, a.y / b.y, a.z / b.z, a.w / b.w) }
func +(a: V4F64, s: F64) -> V4F64 { return V4F64(a.x + s, a.y + s, a.z + s, a.w + s) }
func -(a: V4F64, s: F64) -> V4F64 { return V4F64(a.x - s, a.y - s, a.z - s, a.w - s) }
func *(a: V4F64, s: F64) -> V4F64 { return V4F64(a.x * s, a.y * s, a.z * s, a.w * s) }
func /(a: V4F64, s: F64) -> V4F64 { return V4F64(a.x / s, a.y / s, a.z / s, a.w / s) }


